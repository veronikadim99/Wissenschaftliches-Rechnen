

A = np.zeros((4*(len(x))-2,4))

    b = np.zeros(4*(len(x))-2)
    print(x)
    A[[0],[2]] = 2
    A[[0], [3]] = 6*(x[0])
    A[[4*(len(x))-3], [2]] = 2
    A[[4*(len(x))-3], [3]] = 6 * (x[len(x)-1])
    B = np.zeros((4,4))
    C = np.zeros((4,4))
    counterB = 0
    counterC = 1
    j = 1 #+2  , +4 in the end

    # TODO construct linear system with natural boundary conditions
    while counterC + 1 < len(x) and counterB < len(x):
        B[[0], [0]] = 1
        B[[0], [1]] = x[counterB]
        B[[0], [2]] = x[counterB] ** 2
        B[[0], [3]] = x[counterB] ** 3
        B[[1], [0]] = 1
        B[[1], [1]] = x[counterC]
        B[[1], [2]] = x[counterC] ** 2
        B[[1], [3]] = x[counterC] ** 3
        B[[2], [1]] = 1
        B[[2], [2]] = x[counterC] * 2
        B[[2], [3]] = (x[counterC] ** 2) * 3
        B[[3], [2]] = 2
        B[[3], [3]] = x[counterC] * 6

        C[[0], [1]] = - B[[2], [1]]
        C[[0], [2]] = - B[[2], [2]]
        C[[0], [3]] = - B[[2], [3]]
        C[[1], [2]] = - B[[3], [2]]
        C[[1], [3]] = - B[[3], [3]]
        C[[2], [0]] = B[[1], [0]]
        C[[2], [1]] = B[[1], [1]]
        C[[2], [2]] = B[[1], [2]]
        C[[2], [3]] = B[[1], [3]]
        C[[3], [0]] = 1
        C[[3], [1]] = x[counterC + 1]
        C[[3], [2]] = x[counterC + 1] ** 2
        C[[3], [3]] = x[counterC + 1] ** 3
        A[j: j + 4, 0:4] = B
        j = j + 4

        A[j: j + 4, 0:4] = C
        j = j + 4

        counterB = counterB + 2
        counterC = counterC + 2
